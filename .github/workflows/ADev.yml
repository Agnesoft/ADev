name: ADev

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  check_code:
    name: Check Code
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
      with:
        fetch-depth: 2
    - name: Formatting
      run: |
        git show --pretty="" --name-only HEAD
        if [ ! -z "$COMMITTED_FILES" ]
        then
          echo Installing clang-format-10...
          sudo apt update
          sudo apt install software-properties-common
          sudo add-apt-repository "deb http://apt.llvm.org/bionic/ llvm-toolchain-bionic-10 main"
          sudo apt install clang-format-10
          echo About to run clang-format-10...
          clang-format-10 -i $COMMITED_FILES
          echo Finished with clang-format-10...
          UNFORMATTED_FILES=`git ls-files -m | grep 'cpp\|hpp'`
          echo UNFORMATTED_FILES are $UNFORMATTED_FILES
          if [ ! -z "$UNFORMATTED_FILES" ]
          then
            echo Incorrectly formatted files:
            echo $UNFORMATTED_FILES
            echo Run \'clang-format $UNFORMATTED_FILES\' and commit the result
            exit 1
          fi
        fi

  build_linux_gcc:
    name: Linux GCC
    needs: check_code
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: Prepare
      run: |
        mkdir build
        cd build
        curl -L -o ninja.zip https://github.com/ninja-build/ninja/releases/download/v1.10.0/ninja-linux.zip
        unzip ninja.zip
    - name: Generate
      run: |
        cd build
        export PATH=.:$PATH
        export CC=gcc-9
        export CXX=g++-9
        cmake .. -GNinja -D CMAKE_BUILD_TYPE=Release -D CMAKE_INSTALL_PREFIX=.
    - name: Build
      run: |
        cd build
        ./ninja
    - name: Install
      run: |
        cd build
        ./ninja install
    - name: Archive
      uses: actions/upload-artifact@v1
      with:
        name: adev-linux-gcc-x64
        path: build/bin/
    - name: Test
      run: |
        cd build/bin/test
        find -name "*Test" -type f -executable -exec {} ";"

  build_windows_msvc:
    name: Windows MSVC
    needs: check_code
    runs-on: windows-latest
    steps:
    - uses: actions/checkout@v2
    - name: Prepare
      shell: bash
      run: |
        mkdir build
        cd build
        curl -L -o ninja.zip https://github.com/ninja-build/ninja/releases/download/v1.10.0/ninja-win.zip
        unzip ninja.zip
    - name: Generate
      shell: cmd
      run: |
        cd build
        set CC=cl
        set CXX=cl
        call "C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Auxiliary\Build\vcvars64.bat"
        cmake .. -GNinja -D CMAKE_BUILD_TYPE=Release -D CMAKE_INSTALL_PREFIX=.
    - name: Build
      shell: cmd
      run: |
        cd build
        call "C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Auxiliary\Build\vcvars64.bat"
        ninja
    - name: Install
      shell: bash
      run: |
        cd build
        ./ninja install
    - name: Archive
      uses: actions/upload-artifact@v1
      with:
        name: adev-windows-msvc-x64
        path: build/bin/
    - name: Test
      shell: bash
      run: |
        cd build/bin/test
        find -name "*Test.exe" -type f -executable -exec {} ";"

  build_macos_clang:
    name: macOS Clang
    needs: check_code
    runs-on: macos-latest
    steps:
    - uses: actions/checkout@v2
    - name: Prepare
      run: |
        mkdir build
        cd build
        curl -L -o ninja.zip https://github.com/ninja-build/ninja/releases/download/v1.10.0/ninja-mac.zip
        unzip ninja.zip
    - name: Generate
      run: |
        cd build
        export PATH=.:$PATH
        export CC=clang
        export CXX=clang++
        cmake .. -GNinja -D CMAKE_BUILD_TYPE=Release -D CMAKE_INSTALL_PREFIX=.
    - name: Build
      run: |
        cd build
        ./ninja
    - name: Install
      run: |
        cd build
        ./ninja install
    - name: Archive
      uses: actions/upload-artifact@v1
      with:
        name: adev-mac-clang-x64
        path: build/bin/
    - name: Test
      run: |
        cd build/bin/test
        find . -name "*Test" -type f -exec {} ";"
