name: ADev

on:
  push:
    branches: [master]
  pull_request:
    branches: [master]

jobs:
  formatting:
    name: Code Formatting
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: Formatting
      run: |
        git fetch origin master
        sudo chmod +x ./build.sh
        if ./build.sh check-files; then
          sudo apt-get -qq update
          sudo apt-get -qq install software-properties-common
          sudo add-apt-repository "deb http://apt.llvm.org/bionic/ llvm-toolchain-bionic-10 main" > /dev/null
          sudo apt-get -qq install clang-format-10
          export CLANG_FORMAT=clang-format-10
        fi
        ./build.sh check-formatting
        
  coverage:
    name: Code Coverage
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: Code Coverage
      run: |
        sudo apt-get -qq update
        sudo apt-get -qq install software-properties-common
        sudo add-apt-repository "deb http://apt.llvm.org/bionic/ llvm-toolchain-bionic-10 main" > /dev/null
        sudo apt-get -qq install clang-10 llvm-10
        curl -L -o ninja.zip https://github.com/ninja-build/ninja/releases/download/v1.10.0/ninja-linux.zip
        unzip ninja.zip
        export PATH=$(pwd):$PATH
        export CC=clang-10
        export CXX=clang++-10
        export LLVM_COV=llvm-cov-10
        export LLVM_PROFDATA=llvm-profdata-10
        sudo chmod +x ./build.sh
        ./build.sh coverage

  build:
    name: ${{ matrix.config.name }}
    needs: [formatting, coverage]
    runs-on: ${{ matrix.config.os }}
    strategy:
      fail-fast: false
      matrix:
        config:
          - { name: "Windows MSVC", os: windows-latest, cc: cl, cxx: cl, ninja: win, platform: windows-msvc2019-x64, }
          - { name: "Linux GCC", os: ubuntu-latest, cc: gcc-9, cxx: g++-9, ninja: linux, platform: linux-gcc9-x64, }
          - { name: "macOS Clang", os: macos-latest, cc: clang, cxx: clang++, ninja: macOS-clang9-x64, }
    steps:
    - uses: actions/checkout@v2
    - name: Build
      shell: bash
      run: |
        curl -L -o ninja.zip https://github.com/ninja-build/ninja/releases/download/v1.10.0/ninja-${{ matrix.config.ninja }}.zip
        unzip ninja.zip
        export PATH=$(pwd):$PATH
        export CC=${{ matrix.config.cc }}
        export CXX=${{ matrix.config.cxx }}
        export BUILD_DIR=build
        export BUILD_TYPE=Release
        chmod +x ./build.sh
        ./build.sh build
    - name: Test
      shell: bash
      run: ./build.sh test build
    - name: Archive
      uses: actions/upload-artifact@v1
      with:
        name: adev-${{ matrix.config.platform }}
        path: build/bin/
